{"ast":null,"code":"import decode from 'jwt-decode';\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n  loggedIn() {\n    const token = this.getToken();\n    // If there is a token and it's not expired, return `true`\n    return token && !this.isTokenExpired(token) ? true : false;\n  }\n  isTokenExpired(token) {\n    // Decode the token to get its expiration time that was set by the server\n    const decoded = decode(token);\n    // If the expiration time is less than the current time (in seconds), the token is expired and we return `true`\n    if (decoded.exp < Date.now() / 1000) {\n      localStorage.removeItem('id_token');\n      return true;\n    }\n    // If token hasn't passed its expiration time, return `false`\n    return false;\n  }\n  getToken() {\n    return localStorage.getItem('id_token');\n  }\n  login(idToken) {\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n  logout() {\n    localStorage.removeItem('id_token');\n    window.location.reload();\n  }\n}\nconst authService = new AuthService();","map":{"version":3,"names":["decode","AuthService","getProfile","getToken","loggedIn","token","isTokenExpired","decoded","exp","Date","now","localStorage","removeItem","getItem","login","idToken","setItem","window","location","assign","logout","reload","authService"],"sources":["C:/Users/Bondit Sinlee/Desktop/Esoteric/client/src/utils/auth.js"],"sourcesContent":["import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    const token = this.getToken();\n    // If there is a token and it's not expired, return `true`\n    return token && !this.isTokenExpired(token) ? true : false;\n  }\n\n  isTokenExpired(token) {\n    // Decode the token to get its expiration time that was set by the server\n    const decoded = decode(token);\n    // If the expiration time is less than the current time (in seconds), the token is expired and we return `true`\n    if (decoded.exp < Date.now() / 1000) {\n      localStorage.removeItem('id_token');\n      return true;\n    }\n    // If token hasn't passed its expiration time, return `false`\n    return false;\n  }\n\n  getToken() {\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    localStorage.removeItem('id_token');\n    window.location.reload();\n  }\n}\n\nconst authService = new AuthService();\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,YAAY;AAE/B,MAAMC,WAAW,CAAC;EAChBC,UAAU,GAAG;IACX,OAAOF,MAAM,CAAC,IAAI,CAACG,QAAQ,EAAE,CAAC;EAChC;EAEAC,QAAQ,GAAG;IACT,MAAMC,KAAK,GAAG,IAAI,CAACF,QAAQ,EAAE;IAC7B;IACA,OAAOE,KAAK,IAAI,CAAC,IAAI,CAACC,cAAc,CAACD,KAAK,CAAC,GAAG,IAAI,GAAG,KAAK;EAC5D;EAEAC,cAAc,CAACD,KAAK,EAAE;IACpB;IACA,MAAME,OAAO,GAAGP,MAAM,CAACK,KAAK,CAAC;IAC7B;IACA,IAAIE,OAAO,CAACC,GAAG,GAAGC,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,EAAE;MACnCC,YAAY,CAACC,UAAU,CAAC,UAAU,CAAC;MACnC,OAAO,IAAI;IACb;IACA;IACA,OAAO,KAAK;EACd;EAEAT,QAAQ,GAAG;IACT,OAAOQ,YAAY,CAACE,OAAO,CAAC,UAAU,CAAC;EACzC;EAEAC,KAAK,CAACC,OAAO,EAAE;IACbJ,YAAY,CAACK,OAAO,CAAC,UAAU,EAAED,OAAO,CAAC;IACzCE,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,GAAG,CAAC;EAC7B;EAEAC,MAAM,GAAG;IACPT,YAAY,CAACC,UAAU,CAAC,UAAU,CAAC;IACnCK,MAAM,CAACC,QAAQ,CAACG,MAAM,EAAE;EAC1B;AACF;AAEA,MAAMC,WAAW,GAAG,IAAIrB,WAAW,EAAE"},"metadata":{},"sourceType":"module"}